{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\AWScourse\\\\Twitter\\\\front-end\\\\src\\\\components\\\\HomePage.js\";\nimport React from 'react';\nimport Tweets from './Tweets';\nimport { AuthContext } from '../App';\nconst initialState = {\n  tweets: [],\n  isFetching: false,\n  hasError: false\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_TWEETS_REQUEST\":\n      return { ...state,\n        isFetching: true,\n        hasError: false\n      };\n\n    case \"FETCH_TWEETS_SUCCESS\":\n      return { ...state,\n        isFetching: false,\n        tweets: action.payload\n      };\n\n    case \"FETCH_TWEETS_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        hasError: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const HomePage = () => {\n  const {\n    state: authState\n  } = React.useContext(AuthContext);\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, state.isFetching ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, \"Loading...\") : state.hasError ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, \"AN ERROR HAS ACCURED\") : /*#__PURE__*/React.createElement(React.Fragment, null, state.tweets.length > 0 && state.tweets.map(tweet => /*#__PURE__*/React.createElement(Tweets, {\n    key: tweet.id.toString(),\n    tweet: tweet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }))));\n};\nexport default HomePage;","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/AWScourse/Twitter/front-end/src/components/HomePage.js"],"names":["React","Tweets","AuthContext","initialState","tweets","isFetching","hasError","reducer","state","action","type","payload","HomePage","authState","useContext","dispatch","useReducer","length","map","tweet","id","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,WAAT,QAA4B,QAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,UAAU,EAAE,KAFK;AAGjBC,EAAAA,QAAQ,EAAE;AAHO,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,sBAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHH,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,QAAQ,EAAE;AAHP,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO,EACH,GAAGE,KADA;AAEHH,QAAAA,UAAU,EAAE,KAFT;AAGHD,QAAAA,MAAM,EAAEK,MAAM,CAACE;AAHZ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHH,QAAAA,UAAU,EAAC,KAFR;AAGHC,QAAAA,QAAQ,EAAE;AAHP,OAAP;;AAKJ;AACI,aAAOE,KAAP;AApBR;AAsBH,CAvBD;;AAyBA,OAAO,MAAMI,QAAQ,GAAG,MAAM;AAE1B,QAAM;AAACJ,IAAAA,KAAK,EAAEK;AAAR,MAAqBb,KAAK,CAACc,UAAN,CAAiBZ,WAAjB,CAA3B;AACA,QAAM,CAACM,KAAD,EAAQO,QAAR,IAAoBf,KAAK,CAACgB,UAAN,CAAiBT,OAAjB,EAA0BJ,YAA1B,CAA1B;AAEI,sBACI,0CACCK,KAAK,CAACH,UAAN,gBACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADH,GAEGG,KAAK,CAACF,QAAN,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADA,gBAGA,0CACCE,KAAK,CAACJ,MAAN,CAAaa,MAAb,GAAqB,CAArB,IAA0BT,KAAK,CAACJ,MAAN,CAAac,GAAb,CAAiBC,KAAK,iBAC7C,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAEA,KAAK,CAACC,EAAN,CAASC,QAAT,EAAb;AAAkC,IAAA,KAAK,EAAEF,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADuB,CAD3B,CANJ,CADJ;AAgBP,CArBM;AAsBP,eAAeP,QAAf","sourcesContent":["import React from 'react'\r\nimport Tweets from './Tweets'\r\nimport { AuthContext } from '../App'\r\n\r\nconst initialState = {\r\n    tweets: [],\r\n    isFetching: false,\r\n    hasError: false\r\n}\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"FETCH_TWEETS_REQUEST\":\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                hasError: false\r\n            }\r\n        case \"FETCH_TWEETS_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                tweets: action.payload\r\n            }\r\n        case \"FETCH_TWEETS_FAILURE\":\r\n            return {\r\n                ...state,\r\n                isFetching:false,\r\n                hasError: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const HomePage = () => {\r\n\r\n    const {state: authState} = React.useContext(AuthContext)\r\n    const [state, dispatch] = React.useReducer(reducer, initialState)\r\n\r\n        return(\r\n            <>\r\n            {state.isFetching ? (\r\n                <span>Loading...</span>\r\n            ) : state.hasError ? (\r\n                <span>AN ERROR HAS ACCURED</span>\r\n            ) : ( \r\n                <>\r\n                {state.tweets.length >0 && state.tweets.map(tweet => (\r\n                    <Tweets key={tweet.id.toString()} tweet={tweet}/>\r\n                ))}\r\n                </>\r\n            ) }\r\n            </>\r\n        )\r\n    \r\n}\r\nexport default HomePage"]},"metadata":{},"sourceType":"module"}